import fs from 'fs';
import path from 'path';

/**
 * Creates an index.html file that links to all visualizations
 */
export function createVisualizationViewer() {
  const baseDir = path.join(process.cwd());
  const vizDir = path.join(baseDir, 'visualization');
  const docsDir = path.join(baseDir, 'documentation');

  // Ensure the visualization directory exists
  if (!fs.existsSync(vizDir)) {
    fs.mkdirSync(vizDir, { recursive: true });
    console.log(`Created visualization directory at ${vizDir}`);
  }

  // Find all HTML files in the visualization directory
  const htmlFiles = fs
    .readdirSync(vizDir)
    .filter(file => file.endsWith('.html'))
    .sort((a, b) => {
      // Sort by creation time, newest first
      return (
        fs.statSync(path.join(vizDir, b)).mtime.getTime() -
        fs.statSync(path.join(vizDir, a)).mtime.getTime()
      );
    });

  // Find all documentation directories
  const docDirs = fs.existsSync(docsDir)
    ? fs
        .readdirSync(docsDir)
        .filter(file => fs.statSync(path.join(docsDir, file)).isDirectory())
        .filter(dir => !dir.startsWith('.'))
        .sort((a, b) => {
          // Sort by creation time, newest first
          return (
            fs.statSync(path.join(docsDir, b)).mtime.getTime() -
            fs.statSync(path.join(docsDir, a)).mtime.getTime()
          );
        })
    : [];

  // Generate HTML content
  let htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <title>OpenManus Visualization Viewer</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        h1, h2, h3 {
            color: #2c3e50;
        }
        .card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .card h3 {
            margin-top: 0;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .button {
            display: inline-block;
            background-color: #3498db;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            text-decoration: none;
            margin-right: 10px;
            margin-bottom: 10px;
        }
        .button:hover {
            background-color: #2980b9;
        }
        .date {
            color: #7f8c8d;
            font-size: 0.9em;
        }
        .container {
            display: flex;
            flex-wrap: wrap;
        }
        .column {
            flex: 1;
            min-width: 300px;
            padding: 0 15px;
        }
        iframe {
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 100%;
            height: 400px;
        }
        .orchestrator-flow {
            margin: 20px 0;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }
        .orchestrator-flow h3 {
            color: #2c3e50;
            margin-top: 0;
        }
        .flow-diagram {
            margin: 20px 0;
            text-align: center;
        }
        .agent-info {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 15px;
        }
        .agent-badge {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.9em;
            font-weight: bold;
        }
        .orchestrator {
            background-color: #3498db;
            color: white;
        }
        .planning {
            background-color: #2ecc71;
            color: white;
        }
        .browser {
            background-color: #e74c3c;
            color: white;
        }
        .terminal {
            background-color: #9b59b6;
            color: white;
        }
        .swe {
            background-color: #f39c12;
            color: white;
        }
    </style>
</head>
<body>
    <h1>OpenManus Visualization Viewer</h1>
    <p>This page provides access to all visualizations and documentation generated by the system.</p>

    <div class="orchestrator-flow">
        <h3>Hub-and-Spoke Orchestration Model</h3>
        <p>The OpenManus system uses a hub-and-spoke orchestration model where the Orchestrator Agent acts as the central coordinator for all activities.</p>

        <div class="flow-diagram">
            <svg width="550" height="300" viewBox="0 0 550 300">
                <!-- Central hub (Orchestrator) -->
                <circle cx="275" cy="150" r="50" fill="#3498db" />
                <text x="275" y="155" text-anchor="middle" fill="white" font-weight="bold">Orchestrator</text>

                <!-- Planning Agent Spoke -->
                <circle cx="120" cy="80" r="35" fill="#2ecc71" />
                <text x="120" y="85" text-anchor="middle" fill="white" font-weight="bold">Planning</text>
                <line x1="235" y1="120" x2="150" y2="95" stroke="#999" stroke-width="2" stroke-dasharray="5,5" />
                <polygon points="150,95 158,92 156,101" fill="#999" />
                <line x1="150" y1="95" x2="235" y2="120" stroke="#999" stroke-width="2" />
                <polygon points="235,120 227,123 229,114" fill="#999" />

                <!-- Browser Agent Spoke -->
                <circle cx="120" cy="220" r="35" fill="#e74c3c" />
                <text x="120" y="225" text-anchor="middle" fill="white" font-weight="bold">Browser</text>
                <line x1="235" y1="180" x2="150" y2="205" stroke="#999" stroke-width="2" stroke-dasharray="5,5" />
                <polygon points="150,205 158,202 156,211" fill="#999" />
                <line x1="150" y1="205" x2="235" y2="180" stroke="#999" stroke-width="2" />
                <polygon points="235,180 227,183 229,174" fill="#999" />

                <!-- Terminal Agent Spoke -->
                <circle cx="430" cy="80" r="35" fill="#9b59b6" />
                <text x="430" y="85" text-anchor="middle" fill="white" font-weight="bold">Terminal</text>
                <line x1="315" y1="120" x2="400" y2="95" stroke="#999" stroke-width="2" stroke-dasharray="5,5" />
                <polygon points="400,95 392,92 394,101" fill="#999" />
                <line x1="400" y1="95" x2="315" y2="120" stroke="#999" stroke-width="2" />
                <polygon points="315,120 323,123 321,114" fill="#999" />

                <!-- SWE Agent Spoke -->
                <circle cx="430" cy="220" r="35" fill="#f39c12" />
                <text x="430" y="225" text-anchor="middle" fill="white" font-weight="bold">SWE</text>
                <line x1="315" y1="180" x2="400" y2="205" stroke="#999" stroke-width="2" stroke-dasharray="5,5" />
                <polygon points="400,205 392,202 394,211" fill="#999" />
                <line x1="400" y1="205" x2="315" y2="180" stroke="#999" stroke-width="2" />
                <polygon points="315,180 323,183 321,174" fill="#999" />
            </svg>
        </div>

        <p><strong>How it works:</strong> The orchestrator receives all user requests, determines if planning is needed, and coordinates with specialized agents to complete tasks. All agents report back to the orchestrator after completing their assigned steps.</p>

        <div class="agent-info">
            <span class="agent-badge orchestrator">Orchestrator</span>
            <span class="agent-badge planning">Planning</span>
            <span class="agent-badge browser">Browser</span>
            <span class="agent-badge terminal">Terminal</span>
            <span class="agent-badge swe">SWE</span>
        </div>
    </div>

    <div class="container">
        <div class="column">
            <h2>Interactive Visualizations</h2>
            ${
              htmlFiles.length > 0
                ? htmlFiles
                    .map((file, index) => {
                      const stats = fs.statSync(path.join(vizDir, file));
                      const created = stats.mtime.toLocaleString();
                      const fileDisplayName = file
                        .replace('example_visualization_', '')
                        .replace('.html', '');

                      return `
                <div class="card">
                    <h3>Visualization ${index + 1}</h3>
                    <p class="date">Created: ${created}</p>
                    <p><a href="visualization/${file}" class="button" target="_blank">View Visualization</a></p>
                    ${index === 0 ? `<iframe src="visualization/${file}" title="Latest Visualization"></iframe>` : ''}
                </div>`;
                    })
                    .join('')
                : '<p>No visualizations found.</p>'
            }
        </div>

        <div class="column">
            <h2>Documentation Reports</h2>
            ${
              docDirs.length > 0
                ? docDirs
                    .map((dir, index) => {
                      const userReportPath = path.join(docsDir, dir, 'user-report', 'summary.html');
                      const techReportPath = path.join(docsDir, dir, 'report', 'summary.md');
                      const indexPath = path.join(docsDir, dir, 'index.md');

                      const hasUserReport = fs.existsSync(userReportPath);
                      const hasTechReport = fs.existsSync(techReportPath);
                      const hasIndex = fs.existsSync(indexPath);

                      const stats = fs.statSync(path.join(docsDir, dir));
                      const created = stats.mtime.toLocaleString();

                      return `
                <div class="card">
                    <h3>Documentation ${index + 1}</h3>
                    <p class="date">Created: ${created}</p>
                    <p>
                        ${hasUserReport ? `<a href="documentation/${dir}/user-report/summary.html" class="button" target="_blank">User Report</a>` : ''}
                        ${hasTechReport ? `<a href="documentation/${dir}/report/summary.md" class="button" target="_blank">Technical Report</a>` : ''}
                        ${hasIndex ? `<a href="documentation/${dir}/index.md" class="button" target="_blank">Full Documentation</a>` : ''}
                    </p>
                    ${hasUserReport && index === 0 ? `<iframe src="documentation/${dir}/user-report/summary.html" title="Latest User Report"></iframe>` : ''}
                </div>`;
                    })
                    .join('')
                : '<p>No documentation found.</p>'
            }
        </div>
    </div>

    <script>
        // Add auto-refresh if needed
        // setTimeout(() => location.reload(), 30000);
    </script>
</body>
</html>
    `;

  // Write the index.html file
  const indexPath = path.join(baseDir, 'index.html');
  fs.writeFileSync(indexPath, htmlContent);

  console.log(`Created visualization viewer at ${indexPath}`);
  return indexPath;
}

// Export the function
export default createVisualizationViewer;
